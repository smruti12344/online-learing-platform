// Import necessary functions and hooks
import { userLoggedIn } from '@/slices/authSlice'; // Action to store user data in Redux state
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'; // Functions for creating an API slice

// Define the backend URL for API calls (adjust this according to your server's address)
const backend_URL = "http://localhost:8080/api/v1/user";

// Create the authApi slice using Redux Toolkit's createApi
export const authApi = createApi({
    reducerPath: "authApi", // Unique name for this slice of the Redux store
    baseQuery: fetchBaseQuery({
        baseUrl: backend_URL, // The base URL for API requests (server address)
        credentials: 'include', // Send cookies (useful for authentication) with each request
    }),
    endpoints: (builder) => ({
        // Register User Endpoint (mutation to create a new user)
        registerUser: builder.mutation({
            query: (userData) => ({
                url: "/register", // The endpoint URL for user registration
                method: 'POST', // HTTP method to send data to the server
                body: userData, // The payload that will be sent (user registration data)
            }),
        }),
        
        // Login User Endpoint (mutation to authenticate an existing user)
        loginUser: builder.mutation({
            query: (userData) => ({
                url: "/login", // The endpoint URL for user login
                method: 'POST', // HTTP method to send login data to the server
                body: userData, // The payload that will be sent (user login credentials)
            }),

            // onQueryStarted hook runs when the query starts (before request is fulfilled)
            async onQueryStarted(_, { queryFulfilled, dispatch }) {
                try {
                    // Wait for the query to be fulfilled (i.e., the response is received)
                    const result = await queryFulfilled;

                    // Dispatch userLoggedIn action to store the user data in the Redux store
                    dispatch(userLoggedIn({ user: result.data.user }));

                } catch (error) {
                    // If an error occurs, log it to the console
                    console.log(error);
                }
            }
        }),
        logoutUser: builder.mutation({
            query: () => ({
                url:"/logout",
                method:"GET"
            }),
            async onQueryStarted(_, {queryFulfilled, dispatch}) {
                try { 
                    dispatch(userLoggedOut());
                } catch (error) {
                    console.log(error);
                }
            }
        }),
        loadUser: builder.query({
            query: () => ({
                url:"/profile",
                method:"GET"
            }),
            async onQueryStarted(_, {queryFulfilled, dispatch}) {
                try {
                    const result = await queryFulfilled;
                    dispatch(userLoggedIn({user:result.data.user}));
                } catch (error) {
                    console.log("error in fetching api",error);
                }
            }
        }),
        updateUser: builder.mutation({
            query:(formData)=>({
                url:'/profile/update',
                method:'PUT',
                body:formData,
                
            })
        })
    })
});

// Export the hooks generated by createApi to be used in components for making requests
export const {
    useRegisterUserMutation, // Hook to call the registerUser mutation
    useLoginUserMutation, // Hook to call the loginUser mutation
    useLogoutUserMutation,
    useLoadUserQuery,
    useUpdateUserMutation
} = authApi;
